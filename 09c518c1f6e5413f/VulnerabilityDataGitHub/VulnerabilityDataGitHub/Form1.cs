using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace VulnerabilityDataGitHub
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            start();
        }

        private void start()
        {
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            string str = "https://github.com/c0ec349c3cd33313/79d441f646dea0ce/tree/master/1.0";
            WebRequest oRequest = WebRequest.Create(str);
            WebResponse oResponse = oRequest.GetResponse();
            StreamReader oReader = new StreamReader(oResponse.GetResponseStream(), Encoding.GetEncoding("UTF-8"));
            string title = oReader.ReadToEnd();
            List<string> list = new List<string>();
            foreach (Match m in Regex.Matches(title, @"<a\s+class=""js-navigation-open""[^>]*title=([""'])?(?<title>[^'""]+)\1[^>]*>"))
            {
                byte[] bytes = Convert.FromBase64String(m.Groups["title"].Value);
                string titles = Encoding.GetEncoding("UTF-8").GetString(bytes);
                this.listBox1.Items.Add(titles);
            }
            this.label4.Text = "XML DATA:" + this.listBox1.Items.Count.ToString();
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.listBox1.SelectedItem != null)
            {
                ShowXML();
            }
        }

        private void ShowXML()
        {
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            this.textBox1.Clear();

            string title = this.listBox1.SelectedItem.ToString();
            var ebytes = System.Text.Encoding.Default.GetBytes(title);
            var strBase64 = Convert.ToBase64String(ebytes);
            string path = "https://raw.githubusercontent.com/c0ec349c3cd33313/79d441f646dea0ce/master/1.0/" + strBase64;

            WebClient client = new WebClient();
            string load = client.DownloadString(path);
            byte[] bytes = Convert.FromBase64String(load);
            string decode = Encoding.GetEncoding("UTF-8").GetString(bytes);

            XmlDocument xmlDoc = new XmlDocument();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreComments = true;
            XmlReader reader = XmlReader.Create(new StringReader(decode), settings);
            xmlDoc.Load(reader);
            XmlNode xn = xmlDoc.SelectSingleNode("Vulnerability");
            XmlNodeList xnl = xn.ChildNodes;

            List<Vulnerability> stsList = new List<Vulnerability>();
            string[] str = new string[1];
            foreach (XmlNode Xnl in xnl)
            {
                XmlElement xe1 = (XmlElement)Xnl;
                XmlNodeList xnl0 = xe1.ChildNodes;
                this.textBox1.AppendText("漏洞名称：" + xnl0.Item(0).InnerText + "\r\nCVE漏洞编号：" + xnl0.Item(1).InnerText + "\r\nCNVD漏洞编号：" + xnl0.Item(2).InnerText + "\r\n漏洞说明：" + xnl0.Item(3).InnerText + "\r\n影响公司：" + xnl0.Item(4).InnerText + "\r\n影响系统：" + xnl0.Item(5).InnerText + "\r\n影响版本：" + xnl0.Item(6).InnerText + "\r\n影响端口：" + xnl0.Item(7).InnerText + "\r\n漏洞类型：" + xnl0.Item(8).InnerText + "\r\n影响等级：" + xnl0.Item(9).InnerText + "\r\n攻击矢量(AV)：" + xnl0.Item(10).InnerText + "\r\n影响网络环境：" + xnl0.Item(11).InnerText + "\r\n漏洞验证是否公开：" + xnl0.Item(12).InnerText + "\r\n漏洞发布日期：" + xnl0.Item(13).InnerText + "\r\n漏洞上次修改日期：" + xnl0.Item(14).InnerText + "\r\n漏洞列表：\r\n" + xnl0.Item(15).InnerText + "\r\n漏洞补丁：\r\n" + xnl0.Item(16).InnerText + "\r\n漏洞参考：\r\n" + xnl0.Item(17).InnerText);
            }
        }
    }
}
